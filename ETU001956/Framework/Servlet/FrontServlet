import etu001956.framework.annotation.Scope;
import etu001956.test_framework.Emp;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

public class FrontServlet extends HttpServlet {
    private Map<Class<?>, Object> instanceMap;

    public FrontServlet() {
        instanceMap = new HashMap<>();
    }

    protected void service(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (request.getMethod().equals("GET")) {
            // Gérer la requête GET
            // Exemple : Rediriger la requête vers une page JSP pour l'affichage
            request.getRequestDispatcher("/WEB-INF/views/emp.jsp").forward(request, response);
        } else if (request.getMethod().equals("POST")) {
            // Gérer la requête POST
            // Exemple : Traiter les données du formulaire et effectuer les actions nécessaires
            String className = request.getParameter("class");

            try {
                // Vérifier si la classe est un singleton
                Class<?> clazz = Class.forName(className);
                Scope scopeAnnotation = clazz.getAnnotation(Scope.class);
                boolean isSingleton = scopeAnnotation != null && scopeAnnotation.value().equals("singleton");

                Object instance;

                // Récupérer l'instance de la classe ou en créer une nouvelle
                if (isSingleton) {
                    instance = instanceMap.get(clazz);
                    if (instance == null) {
                        instance = clazz.getDeclaredConstructor().newInstance();
                        instanceMap.put(clazz, instance);
                    } else {
                        // Réinitialiser les attributs par défaut pour une instance singleton
                        resetAttributes(instance);
                    }
                } else {
                    instance = clazz.getDeclaredConstructor().newInstance();
                }

                // Associer les attributs du formulaire à l'instance de classe
                for (Method method : clazz.getDeclaredMethods()) {
                    String attributeName = method.getName().toLowerCase().replace("set", "");
                    String attributeValue = request.getParameter(attributeName);
                    if (attributeValue != null) {
                        method.invoke(instance, attributeValue);
                    }
                }

                // Appeler la méthode "execute" de la classe
                Method executeMethod = clazz.getDeclaredMethod("execute");
                executeMethod.invoke(instance);

                // Rediriger vers la page de succès
                request.getRequestDispatcher("success.jsp").forward(request, response);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                    | InstantiationException | InvocationTargetException e) {
                e.printStackTrace();
            }
        }
    }

    private void resetAttributes(Object instance) {
        // Réinitialiser les attributs par défaut de l'instance
        // TODO: Implémenter la logique pour réinitialiser les attributs
    }
}
