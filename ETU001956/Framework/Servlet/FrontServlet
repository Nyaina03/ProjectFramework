
import etu001956.framework.annotation.AnnotationAuth;

import javax.servlet.ServletException;;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

public class FrontServlet extends HttpServlet {
    private Map<String, HttpSession> sessionMap;

    public FrontServlet() {
        sessionMap = new HashMap<>();
    }

    protected void service(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (request.getMethod().equals("GET")) {
            // Gérer la requête GET
            // Exemple : Rediriger la requête vers une page JSP pour l'affichage
            request.getRequestDispatcher("/WEB-INF/views/emp.jsp").forward(request, response);
        } else if (request.getMethod().equals("POST")) {
            // Gérer la requête POST
            // Exemple : Traiter les données du formulaire et effectuer les actions nécessaires
            String className = request.getParameter("class");

            try {
                // Vérifier si la classe est un singleton
                Class<?> clazz = Class.forName(className);
                Object instance = getInstance(clazz);

                // Associer les attributs du formulaire à l'instance de classe
                for (Method method : clazz.getDeclaredMethods()) {
                    String attributeName = method.getName().toLowerCase().replace("set", "");
                    String attributeValue = request.getParameter(attributeName);
                    if (attributeValue != null) {
                        method.invoke(instance, attributeValue);
                    }
                }

                // Vérifier l'authentification
                boolean isAuthenticated = checkAuthentication(instance, request.getSession());

                if (isAuthenticated) {
                    // Appeler les méthodes annotées avec @Auth
                    invokeAuthMethods(instance, request.getSession());

                    // Rediriger vers la page de succès
                    request.getRequestDispatcher("success.jsp").forward(request, response);
                } else {
                    // Rediriger vers une page d'erreur d'authentification
                    request.getRequestDispatcher("auth_error.jsp").forward(request, response);
                }
            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException
                    | InvocationTargetException | NoSuchMethodException e) {
                e.printStackTrace();
            }
        }
    }

    private Object getInstance(Class<?> clazz) throws IllegalAccessException, InstantiationException {
        // Vérifier si la classe est un singleton
        boolean isSingleton = clazz.isAnnotationPresent(Scope.class)
                && clazz.getAnnotation(Scope.class).value().equals("singleton");

        Object instance;

        // Récupérer l'instance de la classe ou en créer une nouvelle
        if (isSingleton) {
            instance = sessionMap.get(clazz.getName());
            if (instance == null) {
                instance = clazz.getDeclaredConstructor().newInstance();
                sessionMap.put(clazz.getName(), (HttpSession) instance);
            } else {
                // Réinitialiser les attributs par défaut pour une instance singleton
                resetAttributes(instance);
            }
        } else {
            instance = clazz.getDeclaredConstructor().newInstance();
        }

        return instance;
    }

    private void resetAttributes(Object instance) {
        // Réinitialiser les attributs par défaut de l'instance
        // TODO: Implémenter la logique pour réinitialiser les attributs
    }

    private boolean checkAuthentication(Object instance, HttpSession session) {
        // Vérifier l'authentification de l'utilisateur
        Auth authAnnotation = instance.getClass().getAnnotation(Auth.class);
        if (authAnnotation != null) {
            String requiredProfile = authAnnotation.value();
            String userRole = (String) session.getAttribute("role");
            return requiredProfile.equals(userRole);
        }
        return true;
    }

    private void invokeAuthMethods(Object instance, HttpSession session) throws IllegalAccessException, InvocationTargetException {
        // Appeler les méthodes annotées avec @Auth
        for (Method method : instance.getClass().getDeclaredMethods()) {
            if (method.isAnnotationPresent(Auth.class)) {
                method.invoke(instance);
            }
        }
    }
}
